tasks.register('wrapper', Wrapper) {
    gradleVersion = '8.4'
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

// Function to get version info from git tags
def getVersionFromGit() {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()

    // Get the latest tag
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue = true
    }

    def latestTag = stdout.toString().trim()

    if (latestTag.isEmpty()) {
        // No tags found, use default values
        return [versionName: "1.0.0", versionCode: 1]
    }

    // Remove 'v' prefix if present
    def versionName = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag

    // Get commit count since the tag for version code
    stdout.reset()
    stderr.reset()
    exec {
        commandLine 'git', 'rev-list', '--count', latestTag + '..HEAD'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue = true
    }

    def commitCount = stdout.toString().trim()
    def baseVersionCode = 1

    // Parse version components for a more meaningful version code
    def versionParts = versionName.split('\\.')
    if (versionParts.length >= 3) {
        def major = versionParts[0].toInteger()
        def minor = versionParts[1].toInteger()
        def patch = versionParts[2].toInteger()
        baseVersionCode = major * 10000 + minor * 100 + patch
    }

    def versionCode = baseVersionCode + (commitCount.isEmpty() ? 0 : commitCount.toInteger())

    return [versionName: versionName, versionCode: versionCode]
}

// Alternative function that works better in CI/CD environments
def getVersionFromGitCI() {
    def versionName = System.getenv('GITHUB_REF_NAME') ?: System.getenv('TAG_NAME')

    if (versionName && versionName.startsWith('v')) {
        versionName = versionName.substring(1)
    }

    if (!versionName) {
        // Fallback to git describe
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
            ignoreExitValue = true
        }
        def latestTag = stdout.toString().trim()
        if (latestTag.startsWith('v')) {
            versionName = latestTag.substring(1)
        } else if (!latestTag.isEmpty()) {
            versionName = latestTag
        } else {
            versionName = "1.0.0"
        }
    }

    // Calculate version code
    def versionParts = versionName.split('\\.')
    def baseVersionCode = 1

    if (versionParts.length >= 3) {
        def major = versionParts[0].toInteger()
        def minor = versionParts[1].toInteger()
        def patch = versionParts[2].toInteger()
        baseVersionCode = major * 10000 + minor * 100 + patch
    }

    // In CI, we're building the exact tag, so no commit count
    def versionCode = baseVersionCode

    return [versionName: versionName, versionCode: versionCode]
}

// Use CI version if in CI environment, otherwise use local git version
def versionInfo = System.getenv('CI') ? getVersionFromGitCI() : getVersionFromGit()

android {
    namespace 'com.harringa.mytime'
    compileSdk 35

    defaultConfig {
        minSdk 26
        targetSdk 35
        versionCode versionInfo.versionCode
        versionName versionInfo.versionName
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    signingConfigs {
        release {
            // Play App Signing - only need upload key
            def uploadKeystore = System.getenv("UPLOAD_KEYSTORE")
            def uploadPassword = System.getenv("UPLOAD_KEY_PASSWORD")
            def uploadAlias = System.getenv("UPLOAD_KEY_ALIAS")
            storeFile file(uploadKeystore ? uploadKeystore : '../upload-keystore.jks')
            storePassword uploadPassword
            keyAlias uploadAlias
            keyPassword uploadPassword
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }
}

// Set the base name for archives to include version
project.archivesBaseName = "mytime-${versionInfo.versionName}"

dependencies {
    // Guava for immutable collections and utilities
    implementation 'com.google.guava:guava:23.0'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    // Multidex for handling 64K method limit
    implementation 'androidx.multidex:multidex:2.0.1'

    // AndroidX dependencies
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    // RecyclerView - not used (using ListView instead for minimal method count)
    // implementation 'androidx.recyclerview:recyclerview:1.3.2'
    // Material Design - not used (using basic widgets for minimal method count)
    // implementation 'com.google.android.material:material:1.11.0'

    implementation project(':libraries:timecalc')
}

// Task to display current version information
task showVersion {
    group = 'versioning'
    description = 'Display current version information'

    doLast {
        println "Current Version Information:"
        println "  Version Name: ${versionInfo.versionName}"
        println "  Version Code: ${versionInfo.versionCode}"
        println "  Target SDK: ${android.compileSdk}"
        println "  Min SDK: ${android.defaultConfig.minSdk}"
        println "  Java Version: ${android.compileOptions.sourceCompatibility}"
        println "  Build Type: ${project.hasProperty('buildType') ? project.buildType : 'debug'}"
        println "  CI Environment: ${System.getenv('CI') ? 'Yes' : 'No'}"

        // Show git information if available
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--always'
            standardOutput = stdout
            ignoreExitValue = true
        }
        def gitDescribe = stdout.toString().trim()
        if (!gitDescribe.isEmpty()) {
            println "  Git Describe: ${gitDescribe}"
        }
    }
}

// Task to output version info in a format suitable for CI/CD
task outputVersionInfo {
    group = 'versioning'
    description = 'Output version information in a format suitable for CI/CD'

    doLast {
        println "VERSION_NAME=${versionInfo.versionName}"
        println "VERSION_CODE=${versionInfo.versionCode}"
        println "TARGET_SDK=${android.compileSdk}"
        println "MIN_SDK=${android.defaultConfig.minSdk}"
        println "JAVA_VERSION=${android.compileOptions.sourceCompatibility}"
    }
}
