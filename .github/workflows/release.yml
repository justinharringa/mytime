name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.1.0

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Decode upload keystore
      run: echo ${{ secrets.UPLOAD_KEYSTORE }} | base64 -d > upload-keystore.jks
      env:
        UPLOAD_KEYSTORE: ${{ secrets.UPLOAD_KEYSTORE }}

    - name: Build signed release App Bundle
      run: ./gradlew bundleRelease
      env:
        UPLOAD_KEYSTORE: ../upload-keystore.jks
        UPLOAD_KEY_ALIAS: ${{ secrets.UPLOAD_KEY_ALIAS }}
        UPLOAD_KEY_PASSWORD: ${{ secrets.UPLOAD_KEY_PASSWORD }}

    - name: Generate Release Notes
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          # Generate changelog from commits since previous tag
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD | grep -v "Merge pull request" | grep -v "Merge branch" | head -20)
        else
          # If no previous tag, show recent commits
          CHANGELOG=$(git log --pretty=format:"- %s" --oneline -10)
        fi

        # Get version info from Gradle (single source of truth)
        VERSION_OUTPUT=$(./gradlew outputVersionInfo --quiet)
        if [ $? -ne 0 ]; then
          echo "Error: Failed to retrieve version information from Gradle." >&2
          exit 1
        fi
        VERSION_NAME=$(echo "$VERSION_OUTPUT" | grep "VERSION_NAME=" | sed 's/VERSION_NAME=//')
        VERSION_CODE=$(echo "$VERSION_OUTPUT" | grep "VERSION_CODE=" | sed 's/VERSION_CODE=//')

        # Extract other build info from build.gradle
        TARGET_SDK=$(grep "compileSdk" mytime/build.gradle | awk '{print $2}')
        MIN_SDK=$(grep "minSdk" mytime/build.gradle | awk '{print $2}')
        JAVA_VERSION=$(grep "sourceCompatibility" mytime/build.gradle | sed 's/.*VERSION_\([0-9]*\).*/\1/')

        # Create release body
        cat << EOF > release_notes.md
        ## Release ${{ github.ref_name }}

        ### What's New
        $CHANGELOG

        ### Installation
        Download the App Bundle (.aab) and upload to Google Play Console for distribution.

        ### Build Info
        - Version: $VERSION_NAME ($VERSION_CODE)
        - Target SDK: $TARGET_SDK
        - Min SDK: $MIN_SDK (Android $(echo "scale=1; $MIN_SDK/10" | bc)+)
        - Java Version: $JAVA_VERSION
        EOF
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          mytime/build/outputs/bundle/release/mytime-release.aab
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
